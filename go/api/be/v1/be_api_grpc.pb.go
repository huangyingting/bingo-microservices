// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: v1/be_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BEClient is the client API for BE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BEClient interface {
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractReply, error)
}

type bEClient struct {
	cc grpc.ClientConnInterface
}

func NewBEClient(cc grpc.ClientConnInterface) BEClient {
	return &bEClient{cc}
}

func (c *bEClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractReply, error) {
	out := new(ExtractReply)
	err := c.cc.Invoke(ctx, "/api.be.v1.BE/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BEServer is the server API for BE service.
// All implementations must embed UnimplementedBEServer
// for forward compatibility
type BEServer interface {
	Extract(context.Context, *ExtractRequest) (*ExtractReply, error)
	mustEmbedUnimplementedBEServer()
}

// UnimplementedBEServer must be embedded to have forward compatible implementations.
type UnimplementedBEServer struct {
}

func (UnimplementedBEServer) Extract(context.Context, *ExtractRequest) (*ExtractReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedBEServer) mustEmbedUnimplementedBEServer() {}

// UnsafeBEServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BEServer will
// result in compilation errors.
type UnsafeBEServer interface {
	mustEmbedUnimplementedBEServer()
}

func RegisterBEServer(s grpc.ServiceRegistrar, srv BEServer) {
	s.RegisterService(&BE_ServiceDesc, srv)
}

func _BE_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BEServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.be.v1.BE/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BEServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BE_ServiceDesc is the grpc.ServiceDesc for BE service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BE_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.be.v1.BE",
	HandlerType: (*BEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _BE_Extract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/be_api.proto",
}
