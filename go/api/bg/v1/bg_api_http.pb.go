// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type GeoHTTPServer interface {
	Liveness(context.Context, *emptypb.Empty) (*StatusReply, error)
	Location(context.Context, *LocationRequest) (*LocationReply, error)
	Readiness(context.Context, *emptypb.Empty) (*StatusReply, error)
}

func RegisterGeoHTTPServer(s *http.Server, srv GeoHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/location/{ip}", _Geo_Location0_HTTP_Handler(srv))
	r.GET("/healthz", _Geo_Liveness0_HTTP_Handler(srv))
	r.GET("/readyz", _Geo_Readiness0_HTTP_Handler(srv))
}

func _Geo_Location0_HTTP_Handler(srv GeoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LocationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bg.v1.Geo/Location")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Location(ctx, req.(*LocationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LocationReply)
		return ctx.Result(200, reply)
	}
}

func _Geo_Liveness0_HTTP_Handler(srv GeoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bg.v1.Geo/Liveness")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Liveness(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatusReply)
		return ctx.Result(200, reply)
	}
}

func _Geo_Readiness0_HTTP_Handler(srv GeoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bg.v1.Geo/Readiness")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Readiness(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatusReply)
		return ctx.Result(200, reply)
	}
}

type GeoHTTPClient interface {
	Liveness(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *StatusReply, err error)
	Location(ctx context.Context, req *LocationRequest, opts ...http.CallOption) (rsp *LocationReply, err error)
	Readiness(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *StatusReply, err error)
}

type GeoHTTPClientImpl struct {
	cc *http.Client
}

func NewGeoHTTPClient(client *http.Client) GeoHTTPClient {
	return &GeoHTTPClientImpl{client}
}

func (c *GeoHTTPClientImpl) Liveness(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*StatusReply, error) {
	var out StatusReply
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bg.v1.Geo/Liveness"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GeoHTTPClientImpl) Location(ctx context.Context, in *LocationRequest, opts ...http.CallOption) (*LocationReply, error) {
	var out LocationReply
	pattern := "/v1/location/{ip}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bg.v1.Geo/Location"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GeoHTTPClientImpl) Readiness(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*StatusReply, error) {
	var out StatusReply
	pattern := "/readyz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bg.v1.Geo/Readiness"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
