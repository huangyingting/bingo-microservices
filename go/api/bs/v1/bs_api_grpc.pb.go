// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: v1/bs_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortUrlClient is the client API for ShortUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error)
	UpdateShortUrl(ctx context.Context, in *UpdateShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error)
	ListShortUrl(ctx context.Context, in *ListShortUrlRequest, opts ...grpc.CallOption) (*ListShortUrlResponse, error)
	GetShortUrl(ctx context.Context, in *GetShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error)
	DeleteShortUrl(ctx context.Context, in *DeleteShortUrlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Liveness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error)
	Readiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error)
}

type shortUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlClient(cc grpc.ClientConnInterface) ShortUrlClient {
	return &shortUrlClient{cc}
}

func (c *shortUrlClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error) {
	out := new(ShortUrlResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/CreateShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) UpdateShortUrl(ctx context.Context, in *UpdateShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error) {
	out := new(ShortUrlResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/UpdateShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) ListShortUrl(ctx context.Context, in *ListShortUrlRequest, opts ...grpc.CallOption) (*ListShortUrlResponse, error) {
	out := new(ListShortUrlResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/ListShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) GetShortUrl(ctx context.Context, in *GetShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error) {
	out := new(ShortUrlResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/GetShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) DeleteShortUrl(ctx context.Context, in *DeleteShortUrlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/DeleteShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) Liveness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) Readiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrl/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlServer is the server API for ShortUrl service.
// All implementations must embed UnimplementedShortUrlServer
// for forward compatibility
type ShortUrlServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*ShortUrlResponse, error)
	UpdateShortUrl(context.Context, *UpdateShortUrlRequest) (*ShortUrlResponse, error)
	ListShortUrl(context.Context, *ListShortUrlRequest) (*ListShortUrlResponse, error)
	GetShortUrl(context.Context, *GetShortUrlRequest) (*ShortUrlResponse, error)
	DeleteShortUrl(context.Context, *DeleteShortUrlRequest) (*emptypb.Empty, error)
	Liveness(context.Context, *emptypb.Empty) (*StatusReply, error)
	Readiness(context.Context, *emptypb.Empty) (*StatusReply, error)
	mustEmbedUnimplementedShortUrlServer()
}

// UnimplementedShortUrlServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlServer struct {
}

func (UnimplementedShortUrlServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*ShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortUrlServer) UpdateShortUrl(context.Context, *UpdateShortUrlRequest) (*ShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShortUrl not implemented")
}
func (UnimplementedShortUrlServer) ListShortUrl(context.Context, *ListShortUrlRequest) (*ListShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShortUrl not implemented")
}
func (UnimplementedShortUrlServer) GetShortUrl(context.Context, *GetShortUrlRequest) (*ShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUrl not implemented")
}
func (UnimplementedShortUrlServer) DeleteShortUrl(context.Context, *DeleteShortUrlRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortUrl not implemented")
}
func (UnimplementedShortUrlServer) Liveness(context.Context, *emptypb.Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedShortUrlServer) Readiness(context.Context, *emptypb.Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedShortUrlServer) mustEmbedUnimplementedShortUrlServer() {}

// UnsafeShortUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlServer will
// result in compilation errors.
type UnsafeShortUrlServer interface {
	mustEmbedUnimplementedShortUrlServer()
}

func RegisterShortUrlServer(s grpc.ServiceRegistrar, srv ShortUrlServer) {
	s.RegisterService(&ShortUrl_ServiceDesc, srv)
}

func _ShortUrl_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/CreateShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_UpdateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).UpdateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/UpdateShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).UpdateShortUrl(ctx, req.(*UpdateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_ListShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).ListShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/ListShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).ListShortUrl(ctx, req.(*ListShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_GetShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).GetShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/GetShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).GetShortUrl(ctx, req.(*GetShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_DeleteShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).DeleteShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/DeleteShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).DeleteShortUrl(ctx, req.(*DeleteShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).Liveness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrl/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).Readiness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrl_ServiceDesc is the grpc.ServiceDesc for ShortUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shorturl.v1.ShortUrl",
	HandlerType: (*ShortUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _ShortUrl_CreateShortUrl_Handler,
		},
		{
			MethodName: "UpdateShortUrl",
			Handler:    _ShortUrl_UpdateShortUrl_Handler,
		},
		{
			MethodName: "ListShortUrl",
			Handler:    _ShortUrl_ListShortUrl_Handler,
		},
		{
			MethodName: "GetShortUrl",
			Handler:    _ShortUrl_GetShortUrl_Handler,
		},
		{
			MethodName: "DeleteShortUrl",
			Handler:    _ShortUrl_DeleteShortUrl_Handler,
		},
		{
			MethodName: "Liveness",
			Handler:    _ShortUrl_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ShortUrl_Readiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bs_api.proto",
}

// CaptchaClient is the client API for Captcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptchaClient interface {
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type captchaClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptchaClient(cc grpc.ClientConnInterface) CaptchaClient {
	return &captchaClient{cc}
}

func (c *captchaClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.Captcha/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptchaServer is the server API for Captcha service.
// All implementations must embed UnimplementedCaptchaServer
// for forward compatibility
type CaptchaServer interface {
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	mustEmbedUnimplementedCaptchaServer()
}

// UnimplementedCaptchaServer must be embedded to have forward compatible implementations.
type UnimplementedCaptchaServer struct {
}

func (UnimplementedCaptchaServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedCaptchaServer) mustEmbedUnimplementedCaptchaServer() {}

// UnsafeCaptchaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptchaServer will
// result in compilation errors.
type UnsafeCaptchaServer interface {
	mustEmbedUnimplementedCaptchaServer()
}

func RegisterCaptchaServer(s grpc.ServiceRegistrar, srv CaptchaServer) {
	s.RegisterService(&Captcha_ServiceDesc, srv)
}

func _Captcha_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.Captcha/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Captcha_ServiceDesc is the grpc.ServiceDesc for Captcha service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Captcha_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shorturl.v1.Captcha",
	HandlerType: (*CaptchaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Captcha_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bs_api.proto",
}

// TagSuggestClient is the client API for TagSuggest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagSuggestClient interface {
	Verify(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
}

type tagSuggestClient struct {
	cc grpc.ClientConnInterface
}

func NewTagSuggestClient(cc grpc.ClientConnInterface) TagSuggestClient {
	return &tagSuggestClient{cc}
}

func (c *tagSuggestClient) Verify(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.TagSuggest/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagSuggestServer is the server API for TagSuggest service.
// All implementations must embed UnimplementedTagSuggestServer
// for forward compatibility
type TagSuggestServer interface {
	Verify(context.Context, *SuggestRequest) (*SuggestResponse, error)
	mustEmbedUnimplementedTagSuggestServer()
}

// UnimplementedTagSuggestServer must be embedded to have forward compatible implementations.
type UnimplementedTagSuggestServer struct {
}

func (UnimplementedTagSuggestServer) Verify(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedTagSuggestServer) mustEmbedUnimplementedTagSuggestServer() {}

// UnsafeTagSuggestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagSuggestServer will
// result in compilation errors.
type UnsafeTagSuggestServer interface {
	mustEmbedUnimplementedTagSuggestServer()
}

func RegisterTagSuggestServer(s grpc.ServiceRegistrar, srv TagSuggestServer) {
	s.RegisterService(&TagSuggest_ServiceDesc, srv)
}

func _TagSuggest_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSuggestServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.TagSuggest/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSuggestServer).Verify(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagSuggest_ServiceDesc is the grpc.ServiceDesc for TagSuggest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagSuggest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shorturl.v1.TagSuggest",
	HandlerType: (*TagSuggestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _TagSuggest_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bs_api.proto",
}

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	UpdateMemLoad(ctx context.Context, in *MemLoadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCpuLoad(ctx context.Context, in *CpuLoadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) UpdateMemLoad(ctx context.Context, in *MemLoadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.System/UpdateMemLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateCpuLoad(ctx context.Context, in *CpuLoadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.System/UpdateCpuLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) Stats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.System/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility
type SystemServer interface {
	UpdateMemLoad(context.Context, *MemLoadRequest) (*emptypb.Empty, error)
	UpdateCpuLoad(context.Context, *CpuLoadRequest) (*emptypb.Empty, error)
	Stats(context.Context, *emptypb.Empty) (*StatsResponse, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (UnimplementedSystemServer) UpdateMemLoad(context.Context, *MemLoadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemLoad not implemented")
}
func (UnimplementedSystemServer) UpdateCpuLoad(context.Context, *CpuLoadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCpuLoad not implemented")
}
func (UnimplementedSystemServer) Stats(context.Context, *emptypb.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_UpdateMemLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateMemLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.System/UpdateMemLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateMemLoad(ctx, req.(*MemLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateCpuLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateCpuLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.System/UpdateCpuLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateCpuLoad(ctx, req.(*CpuLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.System/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Stats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shorturl.v1.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMemLoad",
			Handler:    _System_UpdateMemLoad_Handler,
		},
		{
			MethodName: "UpdateCpuLoad",
			Handler:    _System_UpdateCpuLoad_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _System_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bs_api.proto",
}

// ShortUrlBIClient is the client API for ShortUrlBI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlBIClient interface {
	Clicks(ctx context.Context, in *ClicksRequest, opts ...grpc.CallOption) (*ClicksReply, error)
}

type shortUrlBIClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlBIClient(cc grpc.ClientConnInterface) ShortUrlBIClient {
	return &shortUrlBIClient{cc}
}

func (c *shortUrlBIClient) Clicks(ctx context.Context, in *ClicksRequest, opts ...grpc.CallOption) (*ClicksReply, error) {
	out := new(ClicksReply)
	err := c.cc.Invoke(ctx, "/api.shorturl.v1.ShortUrlBI/Clicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlBIServer is the server API for ShortUrlBI service.
// All implementations must embed UnimplementedShortUrlBIServer
// for forward compatibility
type ShortUrlBIServer interface {
	Clicks(context.Context, *ClicksRequest) (*ClicksReply, error)
	mustEmbedUnimplementedShortUrlBIServer()
}

// UnimplementedShortUrlBIServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlBIServer struct {
}

func (UnimplementedShortUrlBIServer) Clicks(context.Context, *ClicksRequest) (*ClicksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clicks not implemented")
}
func (UnimplementedShortUrlBIServer) mustEmbedUnimplementedShortUrlBIServer() {}

// UnsafeShortUrlBIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlBIServer will
// result in compilation errors.
type UnsafeShortUrlBIServer interface {
	mustEmbedUnimplementedShortUrlBIServer()
}

func RegisterShortUrlBIServer(s grpc.ServiceRegistrar, srv ShortUrlBIServer) {
	s.RegisterService(&ShortUrlBI_ServiceDesc, srv)
}

func _ShortUrlBI_Clicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlBIServer).Clicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shorturl.v1.ShortUrlBI/Clicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlBIServer).Clicks(ctx, req.(*ClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrlBI_ServiceDesc is the grpc.ServiceDesc for ShortUrlBI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrlBI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shorturl.v1.ShortUrlBI",
	HandlerType: (*ShortUrlBIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clicks",
			Handler:    _ShortUrlBI_Clicks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bs_api.proto",
}
