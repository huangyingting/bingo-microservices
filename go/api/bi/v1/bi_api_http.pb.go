// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.12.4
// source: v1/bi_api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBIClicks = "/api.bi.v1.BI/Clicks"
const OperationBILiveness = "/api.bi.v1.BI/Liveness"
const OperationBIReadiness = "/api.bi.v1.BI/Readiness"

type BIHTTPServer interface {
	// Clicks Sends a greeting
	Clicks(context.Context, *ClicksRequest) (*ClicksReply, error)
	Liveness(context.Context, *empty.Empty) (*StatusReply, error)
	Readiness(context.Context, *empty.Empty) (*StatusReply, error)
}

func RegisterBIHTTPServer(s *http.Server, srv BIHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/clicks/{alias}", _BI_Clicks0_HTTP_Handler(srv))
	r.GET("/healthz", _BI_Liveness0_HTTP_Handler(srv))
	r.GET("/readyz", _BI_Readiness0_HTTP_Handler(srv))
}

func _BI_Clicks0_HTTP_Handler(srv BIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClicksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBIClicks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Clicks(ctx, req.(*ClicksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClicksReply)
		return ctx.Result(200, reply)
	}
}

func _BI_Liveness0_HTTP_Handler(srv BIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in empty.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBILiveness)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Liveness(ctx, req.(*empty.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatusReply)
		return ctx.Result(200, reply)
	}
}

func _BI_Readiness0_HTTP_Handler(srv BIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in empty.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBIReadiness)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Readiness(ctx, req.(*empty.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatusReply)
		return ctx.Result(200, reply)
	}
}

type BIHTTPClient interface {
	Clicks(ctx context.Context, req *ClicksRequest, opts ...http.CallOption) (rsp *ClicksReply, err error)
	Liveness(ctx context.Context, req *empty.Empty, opts ...http.CallOption) (rsp *StatusReply, err error)
	Readiness(ctx context.Context, req *empty.Empty, opts ...http.CallOption) (rsp *StatusReply, err error)
}

type BIHTTPClientImpl struct {
	cc *http.Client
}

func NewBIHTTPClient(client *http.Client) BIHTTPClient {
	return &BIHTTPClientImpl{client}
}

func (c *BIHTTPClientImpl) Clicks(ctx context.Context, in *ClicksRequest, opts ...http.CallOption) (*ClicksReply, error) {
	var out ClicksReply
	pattern := "/v1/clicks/{alias}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBIClicks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BIHTTPClientImpl) Liveness(ctx context.Context, in *empty.Empty, opts ...http.CallOption) (*StatusReply, error) {
	var out StatusReply
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBILiveness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BIHTTPClientImpl) Readiness(ctx context.Context, in *empty.Empty, opts ...http.CallOption) (*StatusReply, error) {
	var out StatusReply
	pattern := "/readyz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBIReadiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
