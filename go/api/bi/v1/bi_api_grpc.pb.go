// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: v1/bi_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BIClient is the client API for BI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BIClient interface {
	// Sends a greeting
	Clicks(ctx context.Context, in *ClicksRequest, opts ...grpc.CallOption) (*ClicksReply, error)
	Liveness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error)
	Readiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error)
}

type bIClient struct {
	cc grpc.ClientConnInterface
}

func NewBIClient(cc grpc.ClientConnInterface) BIClient {
	return &bIClient{cc}
}

func (c *bIClient) Clicks(ctx context.Context, in *ClicksRequest, opts ...grpc.CallOption) (*ClicksReply, error) {
	out := new(ClicksReply)
	err := c.cc.Invoke(ctx, "/api.bi.v1.BI/Clicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bIClient) Liveness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/api.bi.v1.BI/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bIClient) Readiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/api.bi.v1.BI/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BIServer is the server API for BI service.
// All implementations must embed UnimplementedBIServer
// for forward compatibility
type BIServer interface {
	// Sends a greeting
	Clicks(context.Context, *ClicksRequest) (*ClicksReply, error)
	Liveness(context.Context, *emptypb.Empty) (*StatusReply, error)
	Readiness(context.Context, *emptypb.Empty) (*StatusReply, error)
	mustEmbedUnimplementedBIServer()
}

// UnimplementedBIServer must be embedded to have forward compatible implementations.
type UnimplementedBIServer struct {
}

func (UnimplementedBIServer) Clicks(context.Context, *ClicksRequest) (*ClicksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clicks not implemented")
}
func (UnimplementedBIServer) Liveness(context.Context, *emptypb.Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedBIServer) Readiness(context.Context, *emptypb.Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedBIServer) mustEmbedUnimplementedBIServer() {}

// UnsafeBIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BIServer will
// result in compilation errors.
type UnsafeBIServer interface {
	mustEmbedUnimplementedBIServer()
}

func RegisterBIServer(s grpc.ServiceRegistrar, srv BIServer) {
	s.RegisterService(&BI_ServiceDesc, srv)
}

func _BI_Clicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BIServer).Clicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bi.v1.BI/Clicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BIServer).Clicks(ctx, req.(*ClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BI_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BIServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bi.v1.BI/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BIServer).Liveness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BI_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BIServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bi.v1.BI/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BIServer).Readiness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BI_ServiceDesc is the grpc.ServiceDesc for BI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bi.v1.BI",
	HandlerType: (*BIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clicks",
			Handler:    _BI_Clicks_Handler,
		},
		{
			MethodName: "Liveness",
			Handler:    _BI_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _BI_Readiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bi_api.proto",
}
