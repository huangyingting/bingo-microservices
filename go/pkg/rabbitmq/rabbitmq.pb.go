// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: rabbitmq/rabbitmq.proto

package rabbitmq

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscriberConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmqpUri          string               `protobuf:"bytes,1,opt,name=amqp_uri,json=amqpUri,proto3" json:"amqp_uri,omitempty"`
	Name             string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CaCert           string               `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	ClientCert       string               `protobuf:"bytes,4,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ClientKey        string               `protobuf:"bytes,5,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ExchangeName     string               `protobuf:"bytes,6,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	ExchangeType     string               `protobuf:"bytes,7,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty"`
	QueueName        string               `protobuf:"bytes,8,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	QueueMode        string               `protobuf:"bytes,9,opt,name=queue_mode,json=queueMode,proto3" json:"queue_mode,omitempty"`
	RoutingKey       string               `protobuf:"bytes,10,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	DlExchangeName   string               `protobuf:"bytes,11,opt,name=dl_exchange_name,json=dlExchangeName,proto3" json:"dl_exchange_name,omitempty"`
	WorkerCount      uint32               `protobuf:"varint,12,opt,name=worker_count,json=workerCount,proto3" json:"worker_count,omitempty"`
	PrefetchCount    uint32               `protobuf:"varint,13,opt,name=prefetch_count,json=prefetchCount,proto3" json:"prefetch_count,omitempty"`
	ConnectTimeout   *durationpb.Duration `protobuf:"bytes,14,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	ConnectAttempt   uint32               `protobuf:"varint,15,opt,name=connect_attempt,json=connectAttempt,proto3" json:"connect_attempt,omitempty"`
	RetryInterval    *durationpb.Duration `protobuf:"bytes,16,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"`
	ReconnectAttempt uint32               `protobuf:"varint,17,opt,name=reconnect_attempt,json=reconnectAttempt,proto3" json:"reconnect_attempt,omitempty"`
}

func (x *SubscriberConfig) Reset() {
	*x = SubscriberConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_rabbitmq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberConfig) ProtoMessage() {}

func (x *SubscriberConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_rabbitmq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberConfig.ProtoReflect.Descriptor instead.
func (*SubscriberConfig) Descriptor() ([]byte, []int) {
	return file_rabbitmq_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriberConfig) GetAmqpUri() string {
	if x != nil {
		return x.AmqpUri
	}
	return ""
}

func (x *SubscriberConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubscriberConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *SubscriberConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *SubscriberConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *SubscriberConfig) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *SubscriberConfig) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *SubscriberConfig) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *SubscriberConfig) GetQueueMode() string {
	if x != nil {
		return x.QueueMode
	}
	return ""
}

func (x *SubscriberConfig) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *SubscriberConfig) GetDlExchangeName() string {
	if x != nil {
		return x.DlExchangeName
	}
	return ""
}

func (x *SubscriberConfig) GetWorkerCount() uint32 {
	if x != nil {
		return x.WorkerCount
	}
	return 0
}

func (x *SubscriberConfig) GetPrefetchCount() uint32 {
	if x != nil {
		return x.PrefetchCount
	}
	return 0
}

func (x *SubscriberConfig) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *SubscriberConfig) GetConnectAttempt() uint32 {
	if x != nil {
		return x.ConnectAttempt
	}
	return 0
}

func (x *SubscriberConfig) GetRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.RetryInterval
	}
	return nil
}

func (x *SubscriberConfig) GetReconnectAttempt() uint32 {
	if x != nil {
		return x.ReconnectAttempt
	}
	return 0
}

type PublisherConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmqpUri        string               `protobuf:"bytes,1,opt,name=amqp_uri,json=amqpUri,proto3" json:"amqp_uri,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CaCert         string               `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	ClientCert     string               `protobuf:"bytes,4,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ClientKey      string               `protobuf:"bytes,5,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ExchangeName   string               `protobuf:"bytes,6,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	ExchangeType   string               `protobuf:"bytes,7,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty"`
	QueueMode      string               `protobuf:"bytes,8,opt,name=queue_mode,json=queueMode,proto3" json:"queue_mode,omitempty"`
	RoutingKey     string               `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	RetryAttempt   uint32               `protobuf:"varint,10,opt,name=retry_attempt,json=retryAttempt,proto3" json:"retry_attempt,omitempty"`
	RetryInterval  *durationpb.Duration `protobuf:"bytes,11,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"`
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,12,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
}

func (x *PublisherConfig) Reset() {
	*x = PublisherConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_rabbitmq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherConfig) ProtoMessage() {}

func (x *PublisherConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_rabbitmq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherConfig.ProtoReflect.Descriptor instead.
func (*PublisherConfig) Descriptor() ([]byte, []int) {
	return file_rabbitmq_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *PublisherConfig) GetAmqpUri() string {
	if x != nil {
		return x.AmqpUri
	}
	return ""
}

func (x *PublisherConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublisherConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *PublisherConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *PublisherConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *PublisherConfig) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *PublisherConfig) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *PublisherConfig) GetQueueMode() string {
	if x != nil {
		return x.QueueMode
	}
	return ""
}

func (x *PublisherConfig) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *PublisherConfig) GetRetryAttempt() uint32 {
	if x != nil {
		return x.RetryAttempt
	}
	return 0
}

func (x *PublisherConfig) GetRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.RetryInterval
	}
	return nil
}

func (x *PublisherConfig) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

var File_rabbitmq_rabbitmq_proto protoreflect.FileDescriptor

var file_rabbitmq_rabbitmq_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x2f, 0x72, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x69, 0x6e, 0x67, 0x6f,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x05,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x71, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x71, 0x70, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x71, 0x70, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x71, 0x70, 0x55,
	0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x40,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x62, 0x69, 0x6e, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x3b, 0x72, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x6d, 0x71, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rabbitmq_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_rabbitmq_proto_rawDescData = file_rabbitmq_rabbitmq_proto_rawDesc
)

func file_rabbitmq_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(file_rabbitmq_rabbitmq_proto_rawDescData)
	})
	return file_rabbitmq_rabbitmq_proto_rawDescData
}

var file_rabbitmq_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rabbitmq_rabbitmq_proto_goTypes = []interface{}{
	(*SubscriberConfig)(nil),    // 0: bingo.pkg.rabbitmq.SubscriberConfig
	(*PublisherConfig)(nil),     // 1: bingo.pkg.rabbitmq.PublisherConfig
	(*durationpb.Duration)(nil), // 2: google.protobuf.Duration
}
var file_rabbitmq_rabbitmq_proto_depIdxs = []int32{
	2, // 0: bingo.pkg.rabbitmq.SubscriberConfig.connect_timeout:type_name -> google.protobuf.Duration
	2, // 1: bingo.pkg.rabbitmq.SubscriberConfig.retry_interval:type_name -> google.protobuf.Duration
	2, // 2: bingo.pkg.rabbitmq.PublisherConfig.retry_interval:type_name -> google.protobuf.Duration
	2, // 3: bingo.pkg.rabbitmq.PublisherConfig.connect_timeout:type_name -> google.protobuf.Duration
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_rabbitmq_rabbitmq_proto_init() }
func file_rabbitmq_rabbitmq_proto_init() {
	if File_rabbitmq_rabbitmq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rabbitmq_rabbitmq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_rabbitmq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rabbitmq_rabbitmq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_rabbitmq_proto_depIdxs,
		MessageInfos:      file_rabbitmq_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_rabbitmq_proto = out.File
	file_rabbitmq_rabbitmq_proto_rawDesc = nil
	file_rabbitmq_rabbitmq_proto_goTypes = nil
	file_rabbitmq_rabbitmq_proto_depIdxs = nil
}
